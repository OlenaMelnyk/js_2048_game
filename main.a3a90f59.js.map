{"version":3,"sources":["scripts/game.js","scripts/main.js"],"names":["DESIRED_NUMBER","Left","Up","Right","Down","State","Object","freeze","Reset","Started","InProgress","GameOver","Win","Game","gameSize","gameCells","Array","map","v","gameState","gameScore","num","Math","random","emptyCells","cell","index","value","filter","length","floor","fill","start","cell1","getRandomCellIndex","getRandom","cell2","addScore","cells","direction","values","elem","comparePos","startPos","updateScore","indexes","newValues","oldValues","i","ind","refreshedValues","haveChanges","moveRow","moveColumn","left","j","push","row","slice","result","combineValues","fillNewValues","up","column","item","gameField","document","querySelector","score","startButton","startMessage","winMessage","loseMessage","game","render","inProgress","hidden","classList","remove","add","textContent","toggle","rows","children","cellValue","rowIndex","columnIndex","oldValue","move","addEventListener","_event","reset","key"],"mappings":"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","file":"main.a3a90f59.js","sourceRoot":"../src","sourcesContent":["const DESIRED_NUMBER = 2048;\n\nexport const [Left, Up, Right, Down] = [1, 2, 3, 4];\nexport const State = Object.freeze({\n  Reset: 'Reset',\n  Started: 'Started',\n  InProgress: 'InProgress',\n  GameOver: 'GameOver',\n  Win: 'Win',\n});\n\nexport class Game {\n  constructor(gameSize) {\n    this.gameSize = gameSize;\n    this.gameCells = [...Array(gameSize ** 2)].map(v => -1);\n    this.gameState = State.Reset;\n    this.gameScore = 0;\n  }\n\n  getRandom() {\n    const num = Math.random();\n\n    return (num < 0.9) ? 2 : 4;\n  }\n\n  getRandomCellIndex() {\n    const emptyCells = this.gameCells\n      .map((cell, index) => (\n        {\n          index: index,\n          value: cell,\n        }\n      ))\n      .filter((cell) => cell.value === -1);\n\n    if (emptyCells.length) {\n      const index = Math.floor(Math.random() * emptyCells.length);\n\n      return emptyCells[index].index;\n    }\n\n    return -1;\n  }\n\n  reset() {\n    this.gameCells.fill(-1);\n    this.gameScore = 0;\n    this.start();\n  }\n\n  start() {\n    this.gameState = State.Started;\n\n    const cell1 = this.getRandomCellIndex();\n\n    this.gameCells[cell1] = this.getRandom();\n\n    const cell2 = this.getRandomCellIndex();\n\n    this.gameCells[cell2] = this.getRandom();\n  }\n\n  updateScore(addScore) {\n    this.gameScore += addScore;\n\n    if (addScore === DESIRED_NUMBER) {\n      this.gameState = State.Win;\n    }\n  }\n\n  combineValues(cells, direction) {\n    const values = cells\n      .filter(elem => elem !== -1);\n    let comparePos = direction ? 1 : values.length - 2;\n    const prevPos = direction ? 0 : values.length - 1;\n\n    let startPos = prevPos;\n\n    do {\n      if (direction) {\n        if (comparePos >= values.length) {\n          break;\n        }\n      } else if (comparePos < 0) {\n        break;\n      }\n\n      if (values[startPos] === values[comparePos]) {\n        this.updateScore(values[startPos] * 2);\n        values[direction ? startPos : comparePos] *= 2;\n        values[direction ? comparePos : startPos] = -1;\n\n        if (direction) {\n          comparePos += 2;\n          startPos += 2;\n        } else {\n          startPos -= 2;\n          comparePos -= 2;\n        }\n      } else {\n        if (direction) {\n          comparePos++;\n          startPos++;\n        } else {\n          startPos--;\n          comparePos--;\n        }\n      }\n    } while (true);\n\n    return values.filter(value => value !== -1);\n  }\n\n  fillNewValues(indexes, newValues, direction) {\n    const oldValues = indexes.map(index => this.gameCells[index]);\n\n    if (direction) {\n      for (let i = 0; i < newValues.length; i++) {\n        this.gameCells[indexes[i]] = newValues[i];\n      }\n\n      for (let i = newValues.length; i < indexes.length; i++) {\n        this.gameCells[indexes[i]] = -1;\n      }\n    } else {\n      for (let i = 0; i < indexes.length - newValues.length; i++) {\n        this.gameCells[indexes[i]] = -1;\n      }\n\n      for (let i = 0; i < newValues.length; i++) {\n        const ind = indexes[indexes.length - newValues.length + i];\n\n        this.gameCells[ind] = newValues[i];\n      }\n    }\n\n    const refreshedValues = indexes.map(index => this.gameCells[index]);\n    let haveChanges = false;\n\n    for (let i = 0; i < oldValues.length; i++) {\n      if (oldValues[i] !== refreshedValues[i]) {\n        haveChanges = true;\n        break;\n      }\n    }\n\n    return haveChanges;\n  }\n\n  move(direction) {\n    let haveChanges = false;\n\n    if (direction % 2 === 1) {\n      haveChanges = this.moveRow(direction === Left);\n    } else {\n      haveChanges = this.moveColumn(direction === Up);\n    }\n\n    if (this.gameState === State.Started) {\n      this.gameState = State.InProgress;\n    }\n\n    const cell = this.getRandomCellIndex();\n\n    if (cell >= 0) {\n      if (haveChanges) {\n        this.gameCells[cell] = this.getRandom();\n      }\n    } else {\n      this.gameState = State.GameOver;\n    }\n  }\n\n  moveRow(left) {\n    let haveChanges = false;\n\n    for (let i = 0; i < this.gameSize; i++) {\n      const indexes = [];\n\n      for (\n        let j = i * this.gameSize;\n        j < i * this.gameSize + this.gameSize;\n        j++\n      ) {\n        indexes.push(j);\n      }\n\n      const row = this.gameCells\n        .slice(i * this.gameSize, i * this.gameSize + this.gameSize);\n      const result = this.combineValues(row, left);\n\n      haveChanges |= this.fillNewValues(indexes, result, left);\n    }\n\n    return haveChanges;\n  }\n\n  moveColumn(up) {\n    let haveChanges = false;\n\n    for (let i = 0; i < this.gameSize; i++) {\n      const indexes = [];\n\n      for (let j = 0; j < this.gameSize; j++) {\n        indexes.push(i + j * this.gameSize);\n      }\n\n      const column = this.gameCells\n        .filter((item, index) => (index - i) % this.gameSize === 0);\n      const result = this.combineValues(column, up);\n\n      haveChanges |= this.fillNewValues(indexes, result, up);\n    }\n\n    return haveChanges;\n  }\n}\n","import { Game, State, Left, Up, Right, Down } from './game.js';\n\nconst gameField = document.querySelector('.game-field tbody');\nconst score = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nconst gameSize = 4;\nconst game = new Game(gameSize);\n\nfunction render() {\n  const inProgress = (game.gameState === State.InProgress);\n\n  startMessage.hidden = game.gameState >= State.Started;\n  startButton.classList.remove(inProgress ? 'start' : 'restart');\n  startButton.classList.add(inProgress ? 'restart' : 'start');\n  startButton.textContent = inProgress ? 'Restart' : 'Start';\n\n  winMessage.classList.toggle('hidden', game.gameState !== State.Win);\n  loseMessage.classList.toggle('hidden', game.gameState !== State.GameOver);\n  score.textContent = game.gameScore;\n\n  const rows = gameField.children;\n\n  for (let i = 0; i < game.gameCells.length; i++) {\n    const cellValue = game.gameCells[i];\n    const rowIndex = Math.floor(i / game.gameSize);\n    const columnIndex = i % game.gameSize;\n    const cell = rows[rowIndex].children[columnIndex];\n    const oldValue = cell.textContent;\n\n    cell.textContent = '';\n\n    if (oldValue.length) {\n      cell.classList.remove(`field-cell--${oldValue}`);\n    }\n\n    if (cellValue !== -1) {\n      cell.textContent = cellValue;\n      cell.classList.add(`field-cell--${cellValue}`);\n    }\n  }\n};\n\nfunction move(direction) {\n  game.move(direction);\n  render();\n}\n\nstartButton.addEventListener('click', (_event) => {\n  game.reset();\n  render();\n});\n\ndocument.addEventListener('keyup', (_event) => {\n  if (game.gameState !== State.Started\n    && game.gameState !== State.InProgress) {\n    return;\n  }\n\n  switch (_event.key) {\n    case 'ArrowLeft':\n      move(Left);\n      break;\n    case 'ArrowRight':\n      move(Right);\n      break;\n    case 'ArrowUp':\n      move(Up);\n      break;\n    case 'ArrowDown':\n      move(Down);\n      break;\n    default:\n      break;\n  }\n});\n"]}